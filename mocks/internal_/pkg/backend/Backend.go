// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	context "context"

	backend "github.com/laminatedio/dendrite/internal/pkg/backend"

	mock "github.com/stretchr/testify/mock"
)

// Backend is an autogenerated mock type for the Backend type
type Backend struct {
	mock.Mock
}

// Close provides a mock function with given fields: ctx
func (_m *Backend) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, path, version
func (_m *Backend) Get(ctx context.Context, path string, version int) (string, error) {
	ret := _m.Called(ctx, path, version)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, int) string); ok {
		r0 = rf(ctx, path, version)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, path, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrent provides a mock function with given fields: ctx, path
func (_m *Backend) GetCurrent(ctx context.Context, path string) (string, error) {
	ret := _m.Called(ctx, path)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, path)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMany provides a mock function with given fields: ctx, path, version
func (_m *Backend) GetMany(ctx context.Context, path string, version int) ([]string, error) {
	ret := _m.Called(ctx, path, version)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []string); ok {
		r0 = rf(ctx, path, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, path, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetManyCurrent provides a mock function with given fields: ctx, path
func (_m *Backend) GetManyCurrent(ctx context.Context, path string) ([]string, error) {
	ret := _m.Called(ctx, path)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: ctx, path, value, options
func (_m *Backend) Set(ctx context.Context, path string, value string, options backend.SetOptions) (*backend.Metadata, error) {
	ret := _m.Called(ctx, path, value, options)

	var r0 *backend.Metadata
	if rf, ok := ret.Get(0).(func(context.Context, string, string, backend.SetOptions) *backend.Metadata); ok {
		r0 = rf(ctx, path, value, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backend.Metadata)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, backend.SetOptions) error); ok {
		r1 = rf(ctx, path, value, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetMany provides a mock function with given fields: ctx, path, values, options
func (_m *Backend) SetMany(ctx context.Context, path string, values []string, options backend.SetOptions) (*backend.Metadata, error) {
	ret := _m.Called(ctx, path, values, options)

	var r0 *backend.Metadata
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, backend.SetOptions) *backend.Metadata); ok {
		r0 = rf(ctx, path, values, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backend.Metadata)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []string, backend.SetOptions) error); ok {
		r1 = rf(ctx, path, values, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBackend interface {
	mock.TestingT
	Cleanup(func())
}

// NewBackend creates a new instance of Backend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBackend(t mockConstructorTestingTNewBackend) *Backend {
	mock := &Backend{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
